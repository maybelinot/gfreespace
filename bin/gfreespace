#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: Eduard Trott
# @Date:   2015-09-07 15:09:34
# @Email:  etrott@redhat.com
# @Last modified by:   etrott
# @Last Modified time: 2015-09-07 15:09:34

import argparse
import datetime as dt
import httplib2
import logging
import os
import re
import string
import xml.etree.ElementTree as ET

from apiclient import discovery
from apiclient import errors
from dateutil.parser import *
from dateutil.tz import *
from gdata.calendar_resource.client import CalendarResourceClient
import gdata.gauth
import oauth2client

from gfreespace.utils import config, logr
# from gfreespace.utils import logr

# FIXME: Move flags_args to parse_cli
try:
    import argparse
    flags = argparse.ArgumentParser(
        parents=[oauth2client.tools.argparser]).parse_known_args()[0]
except ImportError:
    flags = None

SCOPES = ('https://www.googleapis.com/auth/calendar '
          'https://apps-apis.google.com/a/feeds/calendar/resource/')


def parse_cli():
    '''
    FIXME: DOCS
    '''
    # Setup the argparser
    parser = argparse.ArgumentParser(
        description='Get information about rooms state in Google Calendar')

    # global flags
    # flags = parser.parse_known_args()

    parser.add_argument('-v', '--verbose', action='store_true',
                        help="turn verbose logging ON")
    parser.add_argument('-d', '--debug', action='store_true',
                        help="turn debug logging ON")

    parser.add_argument('-max', '--max_capacity', metavar='MAX_CAP',
                        help="Maximum capacity of rooms", nargs='?',
                        type=int)
    parser.add_argument('-min', '--min_capacity', metavar='MIN_CAP',
                        help="Minimum capacity of rooms", nargs='?',
                        type=int)

    parser.add_argument('-n', '--room_name', metavar='NAME',
                        help="pattern for room selection", nargs='?',
                        type=str)

    parser.add_argument('-s', '--time_start', metavar='START',
                        help="Start time (YYYY-MM-DDThh:mm:ss.sss)", nargs='?',
                        type=str)
    parser.add_argument('-e', '--time-end', metavar='END',
                        help="End time (YYYY-MM-DDThh:mm:ss.sss)", nargs='?',
                        type=str)
    parser.add_argument('-c', '--cred', metavar='CONFIG',
                        default='~/.gdrive_private', help="Path to credentials file",
                        nargs='?', type=str)
    parser.set_defaults(**dict((config or {}).items()))
    # FIXME: add time args

    args = vars(parser.parse_args())  # parse and load args as a dict

    # Go ahead and deal with logging debug/verbosity setting
    if args['debug']:
        logr.setLevel(logging.DEBUG)
    elif args['verbose']:
        logr.setLevel(logging.INFO)
    else:
        logr.setLevel(logging.WARN)

    return args


def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.
    """
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'calendar.json')

    store = oauth2client.file.Storage(credential_path)
    credentials = store.get()
    try:
        http = credentials.authorize(httplib2.Http())
        service = discovery.build('calendar', 'v3', http=http)
        service.settings().list().execute()

        revoked = False
    except errors.HttpError, error:
        if error.resp.status == 401:
            revoked = True
        # Credentials have been revoked.
        # TODO: Figure out why credentials is not marked as invalid

    if not credentials or credentials.invalid or revoked:
        flow = oauth2client.client.flow_from_clientsecrets(
            client_secret_file, SCOPES)
        # flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = oauth2client.tools.run_flow(flow, store, flags)
        else:  # Needed only for compatability with Python 2.6
            credentials = oauth2client.tools.run(flow, store)
        logr.info('Storing credentials to ' + credential_path)
    return credentials


def check_room(service, datetime, room_info):
    """FIXME: DOCS"""
    cal_id = room_info['cal_id']

    start_dt, end_dt = datetime
    # start_dt = start_dt.isoformat("T") + "Z"
    # end_dt = end_dt.isoformat("T") + "Z"

    service.calendarList().insert(body={'id': cal_id}).execute()

    eventsResult = service.events().list(
        calendarId=cal_id, timeMin=start_dt, timeMax=end_dt, singleEvents=True,
        orderBy='startTime').execute()
    events = eventsResult.get('items', [])
    if events == []:
        logr.info("Room %s isn't booked" % (room_info['name']))
    else:
        try:
            logr.info("Room %s is booked by %s" %
                      (room_info['name'], events[0]['organizer']['email']))
        except:
            logr.info("Room %s is booked" % (room_info['name']))

    service.calendarList().delete(calendarId=cal_id).execute()


def get_rooms(domain, resource_type):
    """FIXME: DOCS"""
    credentials = get_credentials()

    client = CalendarResourceClient(domain=domain)
    client.auth_token = gdata.gauth.OAuth2TokenFromCredentials(credentials)

    uri = None
    rooms = {}
    last_page = False

    while not last_page:
        last_page = True

        calendar_resources = client.GetResourceFeed(uri=uri)

        tree = ET.fromstring(str(calendar_resources))
        for child in tree:
            if child.get('rel') == 'next':
                uri = child.get('href')
                last_page = False
            if any([el.get('name') == 'resourceType' and
                    el.get('value') == resource_type for el in child]):
                for el in child:
                    if el.get('name') == 'resourceEmail':
                        room_id = el.get('value')
                    if el.get('name') == 'resourceCommonName':
                        room_name = el.get('value')
                rooms[room_name] = room_id
    return rooms


def parse_rooms_info(rooms):
    """
    City-[Floor]-[Room Number]-Room Name-Capacity-[Equipment]
    """
    room_pattern = re.compile(
        r"([\wÃ©]+)\-([\w+.]*\-)*([a-zA-Z\-]+)(\d+)(\-\w*)*")
    keys = ['city', 'room number', 'room name', 'capacity', 'equipment']

    rooms_info = []
    for room_name in rooms.keys():
        try:
            room_info = {key: room_pattern.match(room_name).group(idx + 1)
                         for idx, key in enumerate(keys)}
        except:
            room_info = {key: None for key in keys}

        room_info['cal_id'] = rooms[room_name]
        room_info['name'] = room_name
        rooms_info.append(room_info)
    return rooms_info


if __name__ == '__main__':
    """
    TODO: Configuration file
    """
    args = parse_cli()

    global credentials_file
    client_secret_file = os.path.expanduser(args['cred'])

    domain = args['domain']
    resource = args['resource']

    rooms = get_rooms(domain=domain, resource_type=resource)
    logr.debug("%d rooms were found" % (len(rooms)))

    rooms_info = parse_rooms_info(rooms)

    if args['room_name']:
        rooms_info = [r for r in rooms_info if r['city']
                      and r['city'].startswith(args['room_name'])]

    if args['min_capacity']:
        rooms_info = [r for r in rooms_info if r['capacity']
                      and int(r['capacity']) > args['min_capacity']]

    if args['max_capacity']:
        rooms_info = [r for r in rooms_info if r['capacity']
                      and int(r['capacity']) < args['max_capacity']]

    if args['time_start']:
        time_start = args['time_start']
        time_start = parse(time_start)
    else:
        time_start = dt.datetime.utcnow()

    if args['time_end']:
        time_end = args['time_end']
        time_end = parse(time_end)
    else:
        time_end = time_start + dt.timedelta(hours=1)

    time_start = time_start.isoformat("T") + "Z"
    time_end = time_end.isoformat("T") + "Z"

    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('calendar', 'v3', http=http)

    for room in rooms_info:
        check_room(service, (time_start, time_end), room)
